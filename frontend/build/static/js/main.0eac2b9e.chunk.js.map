{"version":3,"sources":["components/NavBar/NavBar.jsx","components/Home/ListaEventos/Evento/Evento.jsx","components/Home/ListaEventos/EventosList.jsx","components/Home/Home.jsx","components/Login/Login.jsx","App.js","serviceWorker.js","index.js"],"names":["withRouter","props","useState","open","setOpen","handleReservas","history","push","handleSession","className","onClick","style","textDecoration","selected","Fragment","src","alt","event","NOMBRE","FECHA","PRECIO","USUARIO","events","setEvents","useEffect","axios","get","then","response","data","map","i","key","eventosRef","useRef","window","scroll","left","top","current","offsetTop","behavior","ref","register","setRegister","usuarioRef","contraseñaRef","placeholder","type","path","render","exact","Boolean","location","hostname","match","createBrowserHistory","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0eac2b9e.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport '../NavBar/NavBar.css';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nfunction NavBar(props) {\r\n    let [open, setOpen] = useState(false);\r\n\r\n    let handleHome = () => {\r\n        props.history.push('/');\r\n        setOpen(false);\r\n    };\r\n\r\n    let handleReservas = () => {\r\n        props.history.push('/reservas');\r\n        setOpen(!open);\r\n    };\r\n\r\n    let handleSession = () => {\r\n        props.history.push('/login');\r\n    };\r\n    return (\r\n        <div className='navBarContainer flexbox'>\r\n            <button onClick={() => setOpen(!open)}>☰</button>\r\n            <h1 onClick={handleHome}>Portal de Eventos</h1>\r\n            <div\r\n                className='navTitlesContainer flexbox'\r\n                onClick={handleReservas}\r\n            >\r\n                <h2\r\n                    style={{\r\n                        textDecoration:\r\n                            props.selected === 'Reservas'\r\n                                ? 'underline'\r\n                                : 'none',\r\n                    }}\r\n                >\r\n                    Reservas\r\n                </h2>\r\n            </div>\r\n            <h3 className='session' onClick={handleSession}>\r\n                Iniciar Session\r\n            </h3>\r\n            {open && (\r\n                <div className='mobileContainer'>\r\n                    <div\r\n                        className='mobileNavTitlesContainer flexbox'\r\n                        onClick={handleReservas}\r\n                    >\r\n                        <h2\r\n                            style={{\r\n                                textDecoration:\r\n                                    props.selected === 'Reservas'\r\n                                        ? 'underline'\r\n                                        : 'none',\r\n                            }}\r\n                        >\r\n                            Reservas\r\n                        </h2>\r\n                    </div>\r\n                    <h3 className='mobileSession' onClick={handleSession}>\r\n                        Iniciar Session\r\n                    </h3>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(NavBar);\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Evento.css';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nfunction EventosList(props) {\r\n    return (\r\n        <React.Fragment>\r\n            <div className='cardContainer'>\r\n                <div className='imageContainer'>\r\n                    <img\r\n                        src='https://techdator.net/wp-content/uploads/2020/03/Apple-WWDC-2020-min.jpg'\r\n                        alt=''\r\n                    />\r\n                </div>\r\n                <h2>{props.event.NOMBRE}</h2>\r\n                <h3>{props.event.FECHA}</h3>\r\n                <h3>${props.event.PRECIO}</h3>\r\n                <h3>Organizado por:</h3>\r\n                <h4>{props.event.USUARIO}</h4>\r\n                <button>RESERVAR</button>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default withRouter(EventosList);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Evento from './Evento/Evento';\r\nimport '../ListaEventos/EventosList.css';\r\nimport axios from 'axios';\r\n\r\nfunction EventosList(props) {\r\n    let [events, setEvents] = useState([]);\r\n    useEffect(() => {\r\n        axios.get('/api/eventos').then((response) => {\r\n            setEvents(response.data);\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div className='eventsContainer flexbox'>\r\n            {events.map((event, i) => (\r\n                <Evento key={i} event={event} />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(EventosList);\r\n","import React, { useState, useRef } from 'react';\r\nimport '../Home/Home.css';\r\nimport { withRouter } from 'react-router-dom';\r\nimport EventosList from './ListaEventos/EventosList';\r\n\r\nfunction Home(props) {\r\n    let eventosRef = useRef();\r\n\r\n    let handleExplorar = () => {\r\n        window.scroll({\r\n            left: 0,\r\n            top: eventosRef.current.offsetTop - 60,\r\n            behavior: 'smooth',\r\n        });\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className='mainSection'>\r\n                <div className='triangle'></div>\r\n                <div className='welcomeContainer'>\r\n                    <h1>¡Bienvenido!</h1>\r\n                    <p>\r\n                        En esto portal podrás descubrir muchos eventos para\r\n                        asistír. Tendras la posibilidad de reservar tus entradas\r\n                        e incluso de organizar tus propios eventos.\r\n                    </p>\r\n                    <button onClick={handleExplorar}>EXPLORAR EVENTOS</button>\r\n                </div>\r\n            </div>\r\n            <div className='eventsSection' ref={eventosRef}>\r\n                <div className='stickyTitle'>\r\n                    <button className='addEventButton'>Agregar Evento</button>\r\n                    <h1>Eventos</h1>\r\n                </div>\r\n                <EventosList />\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default withRouter(Home);\r\n","import React, { useState, useRef } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport './Login.css';\r\nimport axios from 'axios';\r\n\r\nfunction Login(props) {\r\n    let [register, setRegister] = useState(false);\r\n\r\n    let usuarioRef = useRef();\r\n    let contraseñaRef = useRef();\r\n\r\n    let handleChange = () => {\r\n        setRegister(!register);\r\n    };\r\n\r\n    let handleSend = () => {};\r\n\r\n    return (\r\n        <div className='loginContainer flexbox'>\r\n            <div className='loginCardContainer'>\r\n                <h1>{register ? 'Crear Cuenta' : 'Iniciar Sesión'}</h1>\r\n                <input placeholder='Usuario' type='text' ref={usuarioRef} />\r\n                <input\r\n                    placeholder='Contraseña'\r\n                    type='text'\r\n                    ref={contraseñaRef}\r\n                />\r\n                <h2 onClick={handleChange}>\r\n                    {register\r\n                        ? '¿Ya tienes Cuenta? Inicia Sesión'\r\n                        : '¿No tienes Cuenta? Registrate'}\r\n                </h2>\r\n                <button onClick={handleSend}>\r\n                    {register ? 'Registrarse' : 'Iniciar Sesión'}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(Login);\r\n","import React from 'react';\nimport { Switch, Route, withRouter } from 'react-router-dom';\nimport './App.css';\nimport NavBar from './components/NavBar/NavBar';\nimport Home from './components/Home/Home';\nimport Login from './components/Login/Login';\n\nfunction App() {\n    return (\n        <div>\n            <Switch>\n                <Route\n                    path='/login'\n                    render={() => {\n                        return <Login />;\n                    }}\n                />\n                <Route\n                    exact\n                    path='/'\n                    render={() => {\n                        return (\n                            <React.Fragment>\n                                <NavBar selected={'Home'} />\n                                <Home />\n                            </React.Fragment>\n                        );\n                    }}\n                />\n                <Route\n                    exact\n                    path='/reservas'\n                    render={() => {\n                        return (\n                            <React.Fragment>\n                                <NavBar selected={'Reservas'} />\n                                <div>Mis Reservas</div>\n                            </React.Fragment>\n                        );\n                    }}\n                />\n            </Switch>\n        </div>\n    );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport { Router } from 'react-router-dom';\n\nimport { createBrowserHistory } from 'history';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nconst history = createBrowserHistory();\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router history={history}>\n            <App history={history} />\n        </Router>\n    </React.StrictMode>,\n\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}